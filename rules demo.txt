关于规则的一些想法：
规则即是我们根据语法结构总结出来的规律，那么这样的三元组提取有什么规律？

t=times的元素数目
a=attributes的元素数目
v=values的元素数目

1、t=a=v
“分别”式一一对应无共用模型，即(t1,t2,t3,a1,a2,a3,v1,v2,v3)结果为(t1,a1,v1),(t2,a2,v2),(t3,a3,v3)

2、t*a=v
“分别”式一一对应共用attributes模型，即(t1,t2,a1,v1,v2)结果为(t1,a1,v1),(t2,a1,v2)


这两条规则是大部分普通语句的基本构造，可以提取匹配出标准句式，但是无法处理冗余、无效的情况
比如“同比”、“占比”等无效化关系词
比如2012-2014年（2012、2013、2014年）的收入分别是100万、200万、300万――时间冗余
公司主要从事建筑施工业务，2013年度、2014年度、2015年度和2016年1-3月，由于碧桂园集团内建筑施工项目逐步转为全面公开竞标的形式招投标，加之劳动力成本的上升，发行人主营业务毛利率分别为21.04%、14.13%、13.01%和9.32%，呈现出逐年下滑的趋势。
――属性冗余
2018年营业收入为100万元，比去年增长了10万元――值冗余

---------
rule_model模型实现了上面的规则1、2，其他情况都采用simple_model里面的匹配方法
统计情况和准确率如下：
rule1 total: 161
rule1 pass: 85
rule2 total: 1303
rule2 pass: 654
other total: 1536
other pass: 523

――King

---------
rule_model_v2.py版本是去除了冗余之后的（即预先判断是否该元素出现在result中，没有就删去）
统计情况和准确率如下：
rule1 total: 874
rule1 pass: 874
rule2 total: 1770
rule2 pass: 1770
other total: 356
other pass: 315

可以看到这样两条规则的准确率都非常高，但是除此之外还需要对余下情况进行考虑。
于是分析数据，发现余下情况基本是“分句”句式
接下来的工作是增加对分句句式的判断，提高规则模型的正确率

――陈欲晓
